#include<iostream>
using namespace std;


/*值传递:当发生函数调用时，给形参分配内存空间
并用实参来初始化形参（直接将实参的值传递给形参）
这一过程是参数值的单向传递过程。一旦形参获得了值，
便与实参脱离关系，此后无论形参怎么变，都不会影响实参
（不能交换）*/
void swap(int a, int b) {
	int temp = a;
	a = b;
	b = temp;
}

/*引用传递：被调函数的形参虽然也作为局部变量在栈中开辟了内存空间，
但在栈中放的是由主调函数放进来的实参变量的地址。
被调函数对形参的任何操作都被间接寻址，即通过栈中的存放的地址访问
主调函数中的中的实参变量（相当于一个人有两个名字），
因此形参在任意改动都直接影响到实参。
(能交换)*/
void swap2(int &a, int &b) {
	int temp = a;
	a = b;
	b = temp;
}

/*指针传递：指针传递其实是值传递的一种，它传递的是地址。
值传递过程中，被调函数的形参作为被调函数的局部变量来处理，
即在函数的栈中有开辟了内存空间来存放主调函数放进来实参的值，
从而成为一个副本。因为指针传递的是外部参数的地址，当调用函数
的形参发生改变时，自然外部实参也发生改变。
(能交换)*/
void swap3(int *a, int *b) {
	int temp = *a;
	*a = *b;
	*b = temp;
}

int main() {
	int x = 5, y = 10;
	cout << "x=" << x << "\ty=" << y << endl;
	swap(x, y);
	cout << "x=" << x << "\ty=" << y << endl;
	swap2(x, y);
	cout << "x=" << x << "\ty=" << y << endl;
	swap3(&x, &y);
	cout << "x=" << x << "\ty=" << y << endl;
	return 0;
}